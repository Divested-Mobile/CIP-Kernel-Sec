description: The mbcache feature in the ext2 and ext4 filesystem implementations in
  the Linux kernel before 4.6 mishandles xattr block caching, which allows local users
  to cause a denial of service (soft lockup) via filesystem operations in environments
  that use many attributes, as demonstrated by Ceph and Samba.
references:
- http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=82939d7999dfc1f1998c4b1c12e2f19edbdff272
- http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=be0726d33cb8f411945884664924bed3cb8c70ee
- http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f9a61eb4e2471c56a63cd804c7474128138c38ac
- http://www.openwall.com/lists/oss-security/2016/08/22/2
- http://www.openwall.com/lists/oss-security/2016/08/25/4
- https://bugzilla.kernel.org/show_bug.cgi?id=107301
- https://bugzilla.redhat.com/show_bug.cgi?id=1360968
- https://github.com/torvalds/linux/commit/82939d7999dfc1f1998c4b1c12e2f19edbdff272
- https://github.com/torvalds/linux/commit/be0726d33cb8f411945884664924bed3cb8c70ee
- https://github.com/torvalds/linux/commit/f9a61eb4e2471c56a63cd804c7474128138c38ac
- https://lwn.net/Articles/668718/
- https://usn.ubuntu.com/3582-1/
- https://usn.ubuntu.com/3582-2/
comments:
  debian/bwh: |-
    The upstream fix (rewrite of mbcache) is too intrusive to backport.
    We will mitigate this with cond_resched() as suggested in comment 1
    on the bz.k.o bug report.  I didn't want to add the no_mbcache mount
    option as in comment 12 because it's a uAPI extension, but it has
    now been added upstream (commit cdb7ee4c6327) so I think it would be
    reasonable to add it to supported stable releases.
    The problem seems to have been introduced (or exacerbated) by commit
    1f3e55fe02d1 in 3.15, which added a retry loop in mb_cache_entry_alloc().
fixed-by:
  debian/buster-security: ['version:debian/4.6.1-1']
  debian/stretch-security: ['version:debian/4.6.1-1']
  mainline: [f9a61eb4e2471c56a63cd804c7474128138c38ac, 82939d7999dfc1f1998c4b1c12e2f19edbdff272,
    be0726d33cb8f411945884664924bed3cb8c70ee]
