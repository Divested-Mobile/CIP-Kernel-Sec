summary: Race condition allows writing to page cache without write permission
advisory: |
  It was discovered that a race condition in the memory management
  code can be used for local privilege escalation.  This does not
  affect kernels built with PREEMPT_RT enabled.
references:
  - https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails
aliases: [Dirty COW]
comments:
  bwh: |
    The __get_user_pages() function implements copy-on-write for
    mappings where this is enabled.  It may be invoked via the ptrace
    API, which is allowed to modify (through copy-on-write) pages that
    are not normally writable, so following a copy-on-write it will
    make the target PTE writable without the normal write permission
    check.  However, there is a race condition that means it is
    possible for a process to make the target PTE point to a shared
    read-only page before the permission change.  This can be used to
    modify the cached version of any readable file, for example to
    inject code into an executable.
reporters:
  - Phil Oester <kernel@linuxace.com>
embargo-end: 2016-10-20T00:00:00+00:00
introduced-by:
  mainline: [f33ea7f404e592e4563b12101b7a4d17da6558d7]
fixed-by:
  mainline: [19be0eaffa3ac7d8eb6784ad9bdbc7d67ed8e619]
  linux-4.4.y: [1294d355881cc5c3421d24fee512f16974addb6c]
fix-depends-on:
  abf09bed3cceadd809f0356065c2ada6cee90d4a: |
    This made PTE dirty bits available on s390 (they were already
    available on all other architectures).  For earlier kernel
    versions, the fix needs to use a different test for whether
    the target PTE is still un-shared.
tests: [gupforce]
