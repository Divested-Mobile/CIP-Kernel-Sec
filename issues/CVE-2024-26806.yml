description: |-
  In the Linux kernel, the following vulnerability has been resolved:
  spi: cadence-qspi: remove system-wide suspend helper calls from runtime PM
  hooks
  The ->runtime_suspend() and ->runtime_resume() callbacks are not
  expected to call spi_controller_suspend() and spi_controller_resume().
  Remove calls to those in the cadence-qspi driver.
  Those helpers have two roles currently:
   - They stop/start the queue, including dealing with the kworker.
   - They toggle the SPI controller SPI_CONTROLLER_SUSPENDED flag. It
     requires acquiring ctlr->bus_lock_mutex.
  Step one is irrelevant because cadence-qspi is not queued. Step two
  however has two implications:
   - A deadlock occurs, because ->runtime_resume() is called in a context
     where the lock is already taken (in the ->exec_op() callback, where
     the usage count is incremented).
   - It would disallow all operations once the device is auto-suspended.
  Here is a brief call tree highlighting the mutex deadlock:
  spi_mem_exec_op()
          ...
          spi_mem_access_start()
                  mutex_lock(&ctlr->bus_lock_mutex)
          cqspi_exec_mem_op()
                  pm_runtime_resume_and_get()
                          cqspi_resume()
                                  spi_controller_resume()
                                          mutex_lock(&ctlr->bus_lock_mutex)
                  ...
          spi_mem_access_end()
                  mutex_unlock(&ctlr->bus_lock_mutex)
          ...
references:
- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-26806
- https://git.kernel.org/stable/c/041562ebc4759c9932b59a06527f8753b86da365
- https://git.kernel.org/stable/c/959043afe53ae80633e810416cee6076da6e91c6
introduced-by:
  mainline: [0578a6dbfe7514db7134501cf93acc21cf13e479]
fixed-by:
  mainline: [959043afe53ae80633e810416cee6076da6e91c6]
