description: |-
  In the Linux kernel, the following vulnerability has been resolved:
  xfs: don't walk off the end of a directory data block
  This adds sanity checks for xfs_dir2_data_unused and xfs_dir2_data_entry
  to make sure don't stray beyond valid memory region. Before patching, the
  loop simply checks that the start offset of the dup and dep is within the
  range. So in a crafted image, if last entry is xfs_dir2_data_unused, we
  can change dup->length to dup->length-1 and leave 1 byte of space. In the
  next traversal, this space will be considered as dup or dep. We may
  encounter an out of bound read when accessing the fixed members.
  In the patch, we make sure that the remaining bytes large enough to hold
  an unused entry before accessing xfs_dir2_data_unused and
  xfs_dir2_data_unused is XFS_DIR2_DATA_ALIGN byte aligned. We also make
  sure that the remaining bytes large enough to hold a dirent with a
  single-byte name before accessing xfs_dir2_data_entry.
references:
- https://www.cve.org/CVERecord?id=CVE-2024-41013
- https://git.kernel.org/linus/0c7fcdb6d06cdf8b19b57c17605215b06afa864a
- https://git.kernel.org/stable/c/0c7fcdb6d06cdf8b19b57c17605215b06afa864a
fixed-by:
  mainline: [0c7fcdb6d06cdf8b19b57c17605215b06afa864a]
