description: "In the Linux kernel, the following vulnerability has been resolved:\n\
  x86/bugs: Use code segment selector for VERW operand\nRobert Gill reported below\
  \ #GP in 32-bit mode when dosemu software was\nexecuting vm86() system call:\n \
  \ general protection fault: 0000 [#1] PREEMPT SMP\n  CPU: 4 PID: 4610 Comm: dosemu.bin\
  \ Not tainted 6.6.21-gentoo-x86 #1\n  Hardware name: Dell Inc. PowerEdge 1950/0H723K,\
  \ BIOS 2.7.0 10/30/2010\n  EIP: restore_all_switch_stack+0xbe/0xcf\n  EAX: 00000000\
  \ EBX: 00000000 ECX: 00000000 EDX: 00000000\n  ESI: 00000000 EDI: 00000000 EBP:\
  \ 00000000 ESP: ff8affdc\n  DS: 0000 ES: 0000 FS: 0000 GS: 0033 SS: 0068 EFLAGS:\
  \ 00010046\n  CR0: 80050033 CR2: 00c2101c CR3: 04b6d000 CR4: 000406d0\n  Call Trace:\n\
  \   show_regs+0x70/0x78\n   die_addr+0x29/0x70\n   exc_general_protection+0x13c/0x348\n\
  \   exc_bounds+0x98/0x98\n   handle_exception+0x14d/0x14d\n   exc_bounds+0x98/0x98\n\
  \   restore_all_switch_stack+0xbe/0xcf\n   exc_bounds+0x98/0x98\n   restore_all_switch_stack+0xbe/0xcf\n\
  This only happens in 32-bit mode when VERW based mitigations like MDS/RFDS\nare\
  \ enabled. This is because segment registers with an arbitrary user value\ncan result\
  \ in #GP when executing VERW. Intel SDM vol. 2C documents the\nfollowing behavior\
  \ for VERW instruction:\n  #GP(0) - If a memory operand effective address is outside\
  \ the CS, DS, ES,\n\t   FS, or GS segment limit.\nCLEAR_CPU_BUFFERS macro executes\
  \ VERW instruction before returning to user\nspace. Use %cs selector to reference\
  \ VERW operand. This ensures VERW will\nnot #GP for an arbitrary user %ds.\n[ mingo:\
  \ Fixed the SOB chain. ]"
references:
- https://www.cve.org/CVERecord?id=CVE-2024-50072
- https://git.kernel.org/linus/e4d2102018542e3ae5e297bc6e229303abff8a0f
- https://git.kernel.org/stable/c/481b477ab63c7245715a3e57ba79eb87c2dc0d02
- https://git.kernel.org/stable/c/bc576fbaf82deded606e69a00efe9752136bf91d
- https://git.kernel.org/stable/c/e4d2102018542e3ae5e297bc6e229303abff8a0f
introduced-by:
  mainline: [a0e2dab44d22b913b4c228c8b52b2a104434b0b3]
fixed-by:
  mainline: [e4d2102018542e3ae5e297bc6e229303abff8a0f]
