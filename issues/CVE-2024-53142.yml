description: "In the Linux kernel, the following vulnerability has been resolved:\n\
  initramfs: avoid filename buffer overrun\nThe initramfs filename field is defined\
  \ in\nDocumentation/driver-api/early-userspace/buffer-format.rst as:\n 37 cpio_file\
  \ := ALGN(4) + cpio_header + filename + \"\\0\" + ALGN(4) + data\n...\n 55 =============\
  \ ================== =========================\n 56 Field name    Field size   \
  \      Meaning\n 57 ============= ================== =========================\n\
  ...\n 70 c_namesize    8 bytes            Length of filename, including final \\\
  0\nWhen extracting an initramfs cpio archive, the kernel's do_name() path\nhandler\
  \ assumes a zero-terminated path at @collected, passing it\ndirectly to filp_open()\
  \ / init_mkdir() / init_mknod().\nIf a specially crafted cpio entry carries a non-zero-terminated\
  \ filename\nand is followed by uninitialized memory, then a file may be created\
  \ with\ntrailing characters that represent the uninitialized memory. The ability\n\
  to create an initramfs entry would imply already having full control of\nthe system,\
  \ so the buffer overrun shouldn't be considered a security\nvulnerability.\nAppend\
  \ the output of the following bash script to an existing initramfs\nand observe\
  \ any created /initramfs_test_fname_overrunAA* path. E.g.\n  ./reproducer.sh | gzip\
  \ >> /myinitramfs\nIt's easiest to observe non-zero uninitialized memory when the\
  \ output is\ngzipped, as it'll overflow the heap allocated @out_buf in __gunzip(),\n\
  rather than the initrd_start+initrd_size block.\n---- reproducer.sh ----\nnilchar=\"\
  A\"\t# change to \"\\0\" to properly zero terminate / pad\nmagic=\"070701\"\nino=1\n\
  mode=$(( 0100777 ))\nuid=0\ngid=0\nnlink=1\nmtime=1\nfilesize=0\ndevmajor=0\ndevminor=1\n\
  rdevmajor=0\nrdevminor=0\ncsum=0\nfname=\"initramfs_test_fname_overrun\"\nnamelen=$((\
  \ ${#fname} + 1 ))\t# plus one to account for terminator\nprintf \"%s%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%s\"\
  \ \\\n\t$magic $ino $mode $uid $gid $nlink $mtime $filesize \\\n\t$devmajor $devminor\
  \ $rdevmajor $rdevminor $namelen $csum $fname\ntermpadlen=$(( 1 + ((4 - ((110 +\
  \ $namelen) & 3)) % 4) ))\nprintf \"%.s${nilchar}\" $(seq 1 $termpadlen)\n---- reproducer.sh\
  \ ----\nSymlink filename fields handled in do_symlink() won't overrun past the\n\
  data segment, due to the explicit zero-termination of the symlink\ntarget.\nFix\
  \ filename buffer overrun by aborting the initramfs FSM if any cpio\nentry doesn't\
  \ carry a zero-terminator at the expected (name_len - 1)\noffset."
references:
- https://www.cve.org/CVERecord?id=CVE-2024-53142
- https://git.kernel.org/linus/e017671f534dd3f568db9e47b0583e853d2da9b5
- https://git.kernel.org/stable/c/49d01e736c3045319e030d1e75fb983011abaca7
- https://git.kernel.org/stable/c/bb7ac96670ab1d8d681015f9d66e45dad579af4d
- https://git.kernel.org/stable/c/e017671f534dd3f568db9e47b0583e853d2da9b5
- https://git.kernel.org/stable/c/fb83b093f75806333b6f4ae29b158d2e0e3ec971
fixed-by:
  mainline: [e017671f534dd3f568db9e47b0583e853d2da9b5]
  stable/4.19: [bb7ac96670ab1d8d681015f9d66e45dad579af4d]
  stable/6.12: [fb83b093f75806333b6f4ae29b158d2e0e3ec971]
